package: org.robovm.apple.messageui
include: [foundation.yaml, uikit.yaml]
library: MessageUI
framework: MessageUI
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/MessageUI.framework/Headers/MessageUI.h
typedefs: {}
    
enums:
    MFMailComposeResult: {}
    MFMailComposeErrorCode: { prefix: MFMailComposeErrorCode }
    MessageComposeResult: {}
        
classes:
    MFMailComposeError:
        extends: NSError
        annotations: ['@StronglyLinked']

    MFMailComposeViewController: # DONE
        methods:
            '-setMessageBody:isHTML:':
                trim_after_first_colon: true
            '-addAttachmentData:mimeType:fileName:':
                trim_after_first_colon: true
            '-setBccRecipients:':
                parameters:
                    bccRecipients:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-setCcRecipients:':
                parameters:
                    ccRecipients:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-setToRecipients:':
                parameters:
                    toRecipients:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
    MFMessageComposeViewController: # DONE
        properties:
            'recipients':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'attachments':
                type: '@org.robovm.rt.bro.annotation.Marshaler(MFMessageComposeViewControllerAttachment.AsListMarshaler.class) List<MFMessageComposeViewControllerAttachment>'
        methods:
            '-addAttachmentURL:withAlternateFilename:':
                name: addAttachment
            '-addAttachmentData:typeIdentifier:filename:':
                name: addAttachment
            '+isSupportedAttachmentUTI:':
                trim_after_first_colon: true

protocols:
    MFMailComposeViewControllerDelegate: # DONE
        methods:
            '-mailComposeController:didFinishWithResult:error:':
                name: didFinish
    MFMessageComposeViewControllerDelegate: # DONE
        methods:
            '-messageComposeViewController:didFinishWithResult:':
                name: didFinish

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?MF.*):
        class: MessageUI
        name: 'Function__#{g[0]}'

values:
    MFMailComposeErrorDomain:
        class: MFMailComposeError
        name: getClassDomain
    
    # MFMessageComposeViewController
    MFMessageComposeViewController(TextMessageAvailabilityDidChangeNotification):
        class: MFMessageComposeViewController
        name: '#{g[0]}'
        type: NSString
    MFMessageComposeViewController(TextMessageAvailabilityKey):
        class: MFMessageComposeViewController
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    MFMessageComposeViewControllerAttachment(.*):
        dictionary: MFMessageComposeViewControllerAttachment
        name: '#{g[0]}'
        type: NSString
        mutable: false
        methods:
            URL:
                type: String
            AlternateFilename:
                type: String
    
    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?MF.*):
        class: MessageUI
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?MF.*):
        class: MessageUI
        name: 'Constant__#{g[0]}'
